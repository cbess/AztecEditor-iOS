# frozen_string_literal: true

default_platform(:ios)

TEST_RUNTIME = 'iOS 18.2'
TEST_DEVICE = 'iPhone 16 Pro'

platform :ios do
  desc 'Builds the project and runs tests'
  lane :test do
    # Don't waste time managing Simulators in CI
    device = create_simulator(TEST_RUNTIME, TEST_DEVICE) unless is_ci

    shared_options = {
      workspace: 'Aztec.xcworkspace',
      prelaunch_simulator: true,
      buildlog_path: File.join(__dir__, '.build', 'logs'),
      derived_data_path: File.join(__dir__, '.build', 'derived-data'),
      ensure_devices_found: true
    }

    shared_options[:device] = device.name unless is_ci

    run_tests(**shared_options, scheme: 'Aztec')
    run_tests(**shared_options, scheme: 'WordPressEditor')

    destroy_simulator(device) unless is_ci
  end
end

def create_simulator(runtime, device)
  fastlane_require 'simctl'
  fastlane_require 'securerandom'

  validate_runtime_exists(runtime)

  simulator = SimCtl.create_device(
    SecureRandom.uuid,
    SimCtl.devicetype(name: device),
    SimCtl.runtime(name: runtime)
  )

  UI.success "Successfully created an #{runtime} #{device} labelled #{simulator.name}"

  simulator
end

def validate_runtime_exists(runtime)
  fastlane_require 'simctl'

  begin
    SimCtl.runtime({ name: runtime })
  rescue StandardError
    SimCtl.list_runtimes.each do |existing_runtime|
      puts existing_runtime.name
    end

    UI.user_error! "#{runtime} is not available. Available runtimes are listed above."
  end
end

def destroy_simulator(simulator)
  runtime = simulator.runtime.name
  device_type_name = simulator.devicetype.name

  simulator.delete
  UI.success "Successfully deleted #{runtime} #{device_type_name}"
end
